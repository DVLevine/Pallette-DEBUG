##################################
# IR Sensor Register and Addresses
##################################
const IR_ADDRESS = $5a

#register addresses
const PART_ID = $00
const REV_ID = $01
const SEQ_ID = $02
const INT_CFG = $03
const IRQ_ENABLE = $04
const IRQ_MODE1 = $05
const IEQ_MODE2 = $06
const HW_KEY = $07
const MEAS_RATE = $08
const ALS_RATE = $09
const PS_RATE = $0a
const ALS_LOW_TH0 = $0b
const ALS_LOW_TH1 = $0c
const ALS_HI_TH0 = $0d
const ALS_HI_TH1 = $0e
const PS_LED21 = $0f
const PS_LED3 = $10
const PS1_TH0 = $11
const PS1_TH1 = $12
const PS2_TH0 = $13
const PS2_TH1 = $14
const PS3_TH0 = $15
const PS3_TH1 = $16
const PARAM_WR = $17
const COMMAND = $18
const RESPONSE = $20
const IRQ_STATUS = $21
const ALS_VIS_DATA0 = $22
const ALS_VIS_DATA1 = $23
const ALS_IR_DATA0 = $24
const ALS_IR_DATA1 = $25
const PS1_DATA0 = $26
const PS1_DATA1 = $27
const PS2_DATA0 = $28
const PS2_DATA1 = $29
const PS3_DATA0 = $2a
const PS3_DATA1 = $2b
const AUX_DATA0 = $2c
const AUX_DATA1 = $2d
const PARAM_RD = $2e
const CHIP_STAT = $30
const ANA_IN_KEY = $3b

# ram addresses
const I2C_ADDR = $00
const CHLIST  = $01
const PSLED12_SELECT = $02
const PSLED3_SELECT = $03
const PS_ENCODING = $05
const ALS_ENCODING = $06
const PS1_ADCMUX = $07
const PS2_ADCMUX = $08
const PS3_ADCMUX = $09
const PS_ADC_COUNTER = $0a
const PS_ADC_GAIN = $0b
const PS_ADC_MISC = $0c
const ALS_IR_ADCMUX = $0e
const AUX_ADCMUX = $0f
const ALS_VIS_ADC_COUNTER = $10
const ALS_VIS_ADC_GAIN = $11
const ALS_VIS_ADC_MISC = $12
const ALS_HYST = $16
const PS_HYST = $17
const PS_HISTORY = $18
const ALS_HISTORY = $19
const ADC_OFFSET  = $1a
const LED_REC = $1c
const ALS_IR_ADC_COUNTER = $1d
const ALS_IR_ADC_GAIN = $1e
const ALS_IR_ADC_MISC = $1f

##################################
# General Variables
##################################
dim hid_attribute					# controls which GATT attribute is used for writing Hardware Interface Device data (normal or boot mode)
dim sensorComm(24)					# Buffer for GATT sensor communication.

##################################
# IR Sensor Variables
##################################
const ir_number_of_sensors = 3		# Number of IR Sensors
const ir_bytes = 2					# Bytes that each IR readings take
dim write_reg_buffer(2)
dim i2c_result						# Result from I2C operation
dim data_len 						# Returned length from I2C read
dim ir_current_sensor				# Sensor currently active from which we get readings
dim ir_begin_byte					# Beginning byte for sensorComm buffer where the current sensor's value is being stored
dim ir_end_byte						# Ending byte for sensorComm buffer where the current sensor's value is being stored
dim ir_tri_state
##################################
# FSR Variables
##################################
const fsr_number_of_sensors = 1		# Number of Force Sensitive Resistors
const fsr_bytes = 2					# Bytes that each FSR readings take
dim fsr_offset 						# Offset of bytes in response
dim fsr_index						# Current FSR being read
dim fsr_result
dim fsr_begin_byte
dim fsr_end_byte
dim fsr_check


##################################
# Switch Variables
##################################
const number_of_switches = 2 		# Number of Force Sensitive Resistors
const sw_bytes = 2					# Bytes that each FSR readings take
dim sw_offset
dim total_data_length

##################################
# I2C Auxiliary Functions
##################################
# Write to I2C register
procedure write_reg(regVal, dataVal)
	write_reg_buffer(0:1) = regVal
	write_reg_buffer(1:1) = dataVal
	call hardware_i2c_write(IR_ADDRESS << 1, 1,2, write_reg_buffer(0:2))
end

# Read from I2C register (Only PS1_DATA and PS0_Data)
procedure read_reg(regAddr)
	call hardware_i2c_write(IR_ADDRESS << 1, 0, 1, regAddr)

	ir_begin_byte = ir_current_sensor*ir_bytes
	ir_end_byte = ir_begin_byte + 1

	if regAddr = PS1_DATA0 then
		call hardware_i2c_read(IR_ADDRESS << 1, 1, 1)(i2c_result, data_len, sensorComm(ir_end_byte:1))
	else
		call hardware_i2c_read(IR_ADDRESS << 1, 1, 1)(i2c_result, data_len, sensorComm(ir_begin_byte:1))
	end if
end

#Ã‚ Set SI1141 parameters
procedure param_set(byteAddress, byteVal)
	call write_reg(PARAM_WR, byteVal)
	call write_reg(COMMAND, $a0 | byteAddress)
end

##################################
# Function that reads all data
# from IR and FSRs every time it
# is called
##################################
procedure getReadings()

	# Select all pins on port 1 (IR tristate buffer enable lines) and
	# set them to enabled.
	# Port 1, Pin Selection Mask 1111 1111, Pin Logical Mask 0000 0000
	call hardware_io_port_write(1, $ff, 0)

	# Ask all sensors to update their sensor value and store them in their
	# respective memory.
	call write_reg(COMMAND, $05)

	ir_current_sensor = 0
	while ir_current_sensor < ir_number_of_sensors

		# Left shift 1 by number of current sensor. For 0 -> 001, 1 -> 010, 2-> 100
		ir_tri_state = $01 << ir_current_sensor

		# XOR tristate with 11111111 to invert: 001-> 110, 010 -> 101, 100 -> 011.
		# This is neccesary, because the tristate buffer activates for 0.
		ir_tri_state = ir_tri_state ^ $ff

		# Enable a single IR sensor via ir_tri_state,
		# And disable the rest.
		call hardware_io_port_write(1, $ff, ir_tri_state)

		# For Single IR Sensor, read IR Data and put it in ir_sensorComm buffer
		call read_reg(PS1_DATA0)
		call read_reg(PS1_DATA1)

		ir_current_sensor = ir_current_sensor + 1

	end while
	call hardware_io_port_write(1, $ff, $ff)
	#call attributes_write(hid_attribute, 0, ir_number_of_sensors*ir_bytes, sensorComm(0:ir_number_of_sensors*ir_bytes))

	fsr_index = 0
	while fsr_index < fsr_number_of_sensors
		call hardware_adc_read(fsr_index, 3, 0) # 12 BITS READ ADC
		fsr_index = fsr_index + 1
	end while



	call attributes_write(hid_attribute, 0, total_data_length, sensorComm(0:total_data_length))
end

############ MIC SECTION

dim proper_value
dim micCheck
dim micVal

dim r_value
dim sequence(30)
dim micCounter
dim avgCounter
dim micAvg
dim micResult

dim last
dim rounds # bounce count for debouncing
dim toggle # resultToggle for debouncing

# Individual Mic reading
event hardware_adc_result(input, value)
  fsr_begin_byte = fsr_offset + (input*fsr_bytes)
  fsr_end_byte = fsr_begin_byte + fsr_bytes

  #LSB
  sensorComm(fsr_begin_byte+1:1) = (value >> 4 & $00ff)

  #MSB
  sensorComm(fsr_begin_byte:1) = ((value >> 12) & $00ff)

	#proper_value = value #sensorComm(fsr_begin_byte:2)
	proper_value = sensorComm(fsr_begin_byte:2)

	if last = 0 then
		last = proper_value
	end if


	micResult = 0
	if (last-proper_value > 1000) then
		micResult = 1
		if (rounds=0) && (toggle = 0) then
			micResult = 1
			rounds = 1000
			toggle = 1
		end if
	end if

	if rounds > 0 then
		rounds = rounds-1
	end if


	sensorComm(fsr_begin_byte:2) = 0

###

  #Keep mean and if sig dif than toggle click
  #micCounter = (micCounter+1)
	#if micCounter>30 then
	#	micCounter = 0
	#end if

	# if last number of sequence is not 0, buffer is full, compute average

	#if sequence(30) = 0 then
	#	micResult = 0
	#else
	#	micAvg = 0
	#	sequence(micCounter) = proper_value
	#	while(avgCounter<30)
	#		micAvg = micAvg+sequence(micCounter)
	#		micCounter = micCounter + 1
	#	end while
	#	micAvg = micAvg/30
	#end if


#	if ((proper_value<micAvg) && (micAvg-proper_value)) >20 then
#		micResult = 1
#	else
#    	if ((proper_value>micAvg) && (proper_value-micAvg)) >20 then
#		    micResult = 1
#      else
#        micResult = 0
#     end if
#  end if


	sensorComm(fsr_begin_byte+1:1) = micResult #(micAvg >> 16 & $00ff)
	last = proper_value

	#fsr_check = value >> 15
	#fsr_check = fsr_check & 1
	#fsr_begin_byte = fsr_offset + (input*fsr_bytes)
	#fsr_end_byte = fsr_begin_byte + fsr_bytes
	#if fsr_check = 0
	#	sensorComm(fsr_begin_byte:2) = (value >> 4)
	#end if
end


####################################################################
# Function to initialize all sensors. No need to block them since
# it is a write only operation.
####################################################################
procedure initializeSI1141()
	call write_reg(HW_KEY, $17)		# Initialization Mode
	call write_reg(PS_LED21, $01)	# Give the LED 1 max power (3.6V) for performance
	call param_set(CHLIST, $01)		# Set CHLIST
end


# System boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol, hw)

	# Assign gatt HID port to our attribute write var
	hid_attribute = xgatt_sensor1_write

	call hardware_io_port_config_direction(1, $ff)
	call hardware_io_port_write(1, $ff, $01 << 7) # for mic

	#call hardware_io_port_config_direction(0,$ff)
	#call hardware_io_port_config_direction(1, $ff)
	#call hardware_io_port_write(1, $ff, 0)


  #NEW
	# Set Port 0 pins P0_0 - P0_3 as input pins
	call hardware_io_port_config_direction(0, 0)

	# Set all Port 0 input pins with internal pull-down; pull-down: 0; pull-up: 1;
	call hardware_io_port_config_pull(0, 0, 0)

	# Interrupt of Port 0, enable P0_2 and P0_3 for button switches
	call hardware_io_port_irq_enable(0, $0c)

	fsr_offset = ir_number_of_sensors*ir_bytes # offset by space  taken by ir readings
	sw_offset = fsr_offset + fsr_number_of_sensors*fsr_bytes
	total_data_length = sw_offset + number_of_switches*sw_bytes
	sensorComm(sw_offset:number_of_switches*sw_bytes) = 0


	# Interrupt of Port 0 at rising edge; rising: 0; falling: 1;
	call hardware_io_port_irq_direction(0, 0)
	#NEW


	## Begin by starting I2C device ##
	call initializeSI1141()

	#call attributes_write(hid_attribute, 0, 1, 1)


	## Set hardware timer to take periodic sensor readings
	call hardware_set_soft_timer(1000,0,0)

	## Initialize bluetooth communication ##

	# Set advertisement interval to 20ms per min, 30 ms max (units are 0.625ms)
	# Use all three advertisement channels (7 = bitmask 0b000001111)
	call gap_set_adv_parameters(32, 48, 7)

	# Start advertising (discoverable/connectable)
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

end

# Device Reading function
event hardware_soft_timer(handle)
	call getReadings()
end


# Disconnection event listener
event connection_disconnected(connection, result)
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end
